import { AddressEventNotificationChain, JsonRpcCall, JsonRpcResponse, Network } from '../dto';
import { TatumConfig } from '../service';
export declare const Utils: {
    getRpc: <T>(id: string, config: TatumConfig) => T;
    getRpcListUrl: (network: Network) => string[];
    mapRpcListUrl: (network: Network) => string;
    getStatusPayload: (network: Network) => {
        jsonrpc: string;
        method: string;
        params: never[];
        id: number;
    };
    parseStatusPayload: (network: Network, response: JsonRpcResponse<any>) => number;
    mapNotificationChainToNetwork: (chain: AddressEventNotificationChain) => Network;
    mapNetworkToNotificationChain: (network: Network) => AddressEventNotificationChain;
    delay: (t: number) => Promise<unknown>;
    fetchWithTimeout: (url: string, containerId: string, config: RequestInit, timeout?: number) => Promise<{
        response: Response;
        responseTime: number;
    }>;
    headersToJson(headers: any): string;
    getHeaders: (id: string) => Headers;
    padWithZero: (data: string, length?: number) => string;
    camelToSnakeCase: (str: string) => string;
    convertObjCamelToSnake: (obj: object) => Record<string, unknown>;
    getClient: <T_1>(id: string, network: Network) => T_1;
    log: ({ id, message, data, mode }: {
        id: string;
        message?: string | undefined;
        data?: object | undefined;
        mode?: "table" | undefined;
    }) => void;
    prepareRpcCall: (method: string, params?: unknown[], id?: number) => JsonRpcCall;
    deepMerge(target: unknown, source: unknown): unknown;
    getV1RpcUrl: (config: TatumConfig, path?: string) => string;
};
