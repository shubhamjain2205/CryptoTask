"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const bignumber_js_1 = require("bignumber.js");
const typedi_1 = require("typedi");
const package_json_1 = require("../../package.json");
const dto_1 = require("../dto");
const service_1 = require("../service");
const EvmArchiveLoadBalancerRpc_1 = require("../service/rpc/evm/EvmArchiveLoadBalancerRpc");
const TronLoadBalancerRpc_1 = require("../service/rpc/evm/TronLoadBalancerRpc");
const TronRpc_1 = require("../service/rpc/evm/TronRpc");
const di_tokens_1 = require("./di.tokens");
exports.Utils = {
    getRpc: (id, config) => {
        const { network } = config;
        if ((0, dto_1.isUtxoLoadBalancerNetwork)(network)) {
            return typedi_1.Container.of(id).get(service_1.UtxoLoadBalancerRpc);
        }
        if ((0, dto_1.isEvmArchiveNonArchiveLoadBalancerNetwork)(network)) {
            return typedi_1.Container.of(id).get(EvmArchiveLoadBalancerRpc_1.EvmArchiveLoadBalancerRpc);
        }
        if ((0, dto_1.isEvmLoadBalancerNetwork)(network)) {
            return typedi_1.Container.of(id).get(service_1.EvmLoadBalancerRpc);
        }
        if ((0, dto_1.isEvmBasedNetwork)(network)) {
            return typedi_1.Container.of(id).get(service_1.EvmRpc);
        }
        if ((0, dto_1.isUtxoBasedNetwork)(network)) {
            return typedi_1.Container.of(id).get(service_1.UtxoRpc);
        }
        if ((0, dto_1.isXrpNetwork)(network)) {
            return typedi_1.Container.of(id).get(service_1.XrpRpc);
        }
        if ((0, dto_1.isSolanaEnabledNetwork)(network)) {
            return typedi_1.Container.of(id).get(service_1.SolanaRpc);
        }
        if ((0, dto_1.isTronLoadBalancerNetwork)(network)) {
            return typedi_1.Container.of(id).get(TronLoadBalancerRpc_1.TronLoadBalancerRpc);
        }
        if ((0, dto_1.isTronNetwork)(network)) {
            return typedi_1.Container.of(id).get(TronRpc_1.TronRpc);
        }
        console.warn(`RPC Network ${network} is not supported.`);
        return typedi_1.Container.of(id).get(service_1.GenericRpc);
    },
    getRpcListUrl: (network) => {
        const mappedNetwork = exports.Utils.mapRpcListUrl(network);
        return [
            `https://rpc.tatum.io/${mappedNetwork}/list.json`,
            `https://rpc.tatum.io/${mappedNetwork}-archive/list.json`,
        ];
    },
    mapRpcListUrl: (network) => {
        const mappedNetwork = dto_1.MAPPED_NETWORK[network];
        return mappedNetwork ?? network;
    },
    getStatusPayload: (network) => {
        if ((0, dto_1.isUtxoBasedNetwork)(network)) {
            return {
                jsonrpc: '2.0',
                method: 'getblockcount',
                params: [],
                id: 1,
            };
        }
        if ((0, dto_1.isEvmBasedNetwork)(network) || (0, dto_1.isTronNetwork)(network)) {
            return {
                jsonrpc: '2.0',
                method: 'eth_blockNumber',
                params: [],
                id: 1,
            };
        }
        throw new Error(`Network ${network} is not supported.`);
    },
    parseStatusPayload: (network, response) => {
        if ((0, dto_1.isUtxoBasedNetwork)(network) || (0, dto_1.isEvmBasedNetwork)(network)) {
            return new bignumber_js_1.BigNumber(response.result || -1).toNumber();
        }
        throw new Error(`Network ${network} is not supported.`);
    },
    mapNotificationChainToNetwork: (chain) => {
        switch (chain) {
            case dto_1.AddressEventNotificationChain.BTC:
                return dto_1.Network.BITCOIN;
            case dto_1.AddressEventNotificationChain.BCH:
                return dto_1.Network.BITCOIN_CASH;
            case dto_1.AddressEventNotificationChain.LTC:
                return dto_1.Network.LITECOIN;
            case dto_1.AddressEventNotificationChain.DOGE:
                return dto_1.Network.DOGECOIN;
            case dto_1.AddressEventNotificationChain.ETH:
                return dto_1.Network.ETHEREUM;
            case dto_1.AddressEventNotificationChain.MATIC:
                return dto_1.Network.POLYGON;
            case dto_1.AddressEventNotificationChain.CELO:
                return dto_1.Network.CELO;
            case dto_1.AddressEventNotificationChain.SOL:
                return dto_1.Network.SOLANA;
            case dto_1.AddressEventNotificationChain.XRP:
                return dto_1.Network.XRP;
            case dto_1.AddressEventNotificationChain.BSC:
                return dto_1.Network.BINANCE_SMART_CHAIN;
            case dto_1.AddressEventNotificationChain.TRON:
                return dto_1.Network.TRON;
            case dto_1.AddressEventNotificationChain.KLAY:
                return dto_1.Network.KLAYTN;
            case dto_1.AddressEventNotificationChain.EON:
                return dto_1.Network.HORIZEN_EON;
            default:
                throw new Error(`Chain ${chain} is not supported.`);
        }
    },
    mapNetworkToNotificationChain: (network) => {
        switch (network) {
            case dto_1.Network.BITCOIN:
            case dto_1.Network.BITCOIN_TESTNET:
                return dto_1.AddressEventNotificationChain.BTC;
            case dto_1.Network.BITCOIN_CASH:
            case dto_1.Network.BITCOIN_CASH_TESTNET:
                return dto_1.AddressEventNotificationChain.BCH;
            case dto_1.Network.LITECOIN:
            case dto_1.Network.LITECOIN_TESTNET:
                return dto_1.AddressEventNotificationChain.LTC;
            case dto_1.Network.DOGECOIN:
            case dto_1.Network.DOGECOIN_TESTNET:
                return dto_1.AddressEventNotificationChain.DOGE;
            case dto_1.Network.ETHEREUM:
            case dto_1.Network.ETHEREUM_SEPOLIA:
            case dto_1.Network.ETHEREUM_GOERLI:
                return dto_1.AddressEventNotificationChain.ETH;
            case dto_1.Network.POLYGON:
            case dto_1.Network.POLYGON_MUMBAI:
                return dto_1.AddressEventNotificationChain.MATIC;
            case dto_1.Network.CELO:
            case dto_1.Network.CELO_ALFAJORES:
                return dto_1.AddressEventNotificationChain.CELO;
            case dto_1.Network.SOLANA:
            case dto_1.Network.SOLANA_DEVNET:
                return dto_1.AddressEventNotificationChain.SOL;
            case dto_1.Network.XRP:
            case dto_1.Network.XRP_TESTNET:
                return dto_1.AddressEventNotificationChain.XRP;
            case dto_1.Network.BINANCE_SMART_CHAIN:
            case dto_1.Network.BINANCE_SMART_CHAIN_TESTNET:
                return dto_1.AddressEventNotificationChain.BSC;
            case dto_1.Network.TRON:
            case dto_1.Network.TRON_SHASTA:
                return dto_1.AddressEventNotificationChain.TRON;
            case dto_1.Network.KLAYTN:
            case dto_1.Network.KLAYTN_BAOBAB:
                return dto_1.AddressEventNotificationChain.KLAY;
            case dto_1.Network.TEZOS:
                return dto_1.AddressEventNotificationChain.TEZOS;
            case dto_1.Network.HORIZEN_EON:
                return dto_1.AddressEventNotificationChain.EON;
            default:
                throw new Error(`Network ${network} is not supported.`);
        }
    },
    delay: (t) => new Promise((resolve) => setTimeout(resolve, t)),
    fetchWithTimeout: async (url, containerId, config, timeout = 5000) => {
        const controller = new AbortController();
        const id = setTimeout(() => controller.abort(), timeout);
        const start = Date.now();
        const response = await fetch(url, {
            ...config,
            signal: controller.signal,
            headers: exports.Utils.getHeaders(containerId),
        });
        const responseTime = Date.now() - start;
        clearTimeout(id);
        return { responseTime, response };
    },
    headersToJson(headers) {
        const headersObj = {};
        headers.forEach((value, key) => {
            headersObj[key] = value;
        });
        return JSON.stringify(headersObj);
    },
    getHeaders: (id) => {
        const config = typedi_1.Container.of(id).get(di_tokens_1.CONFIG);
        const headers = new Headers({
            'Content-Type': 'application/json',
            'x-ttm-sdk-version': package_json_1.version,
            'x-ttm-sdk-product': 'JS',
            'x-ttm-sdk-debug': `${config.verbose}`,
        });
        if (config.apiKey) {
            if (config.version === service_1.ApiVersion.V3 && config.apiKey.v3) {
                headers.append('x-api-key', config.apiKey.v3);
            }
            else if (config.version === service_1.ApiVersion.V4 && config.apiKey.v4) {
                headers.append('x-api-key', config.apiKey.v4);
            }
        }
        return headers;
    },
    padWithZero: (data, length = 64) => data.replace('0x', '').padStart(length, '0'),
    camelToSnakeCase: (str) => str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`),
    convertObjCamelToSnake: (obj) => {
        const snakeObj = {};
        for (const [key, value] of Object.entries(obj)) {
            const snakeKey = exports.Utils.camelToSnakeCase(key);
            if (value instanceof bignumber_js_1.BigNumber) {
                snakeObj[snakeKey] = value.toNumber();
            }
            else if (typeof value === 'object' && value !== null) {
                snakeObj[snakeKey] = exports.Utils.convertObjCamelToSnake(value);
            }
            else {
                snakeObj[snakeKey] = value;
            }
        }
        return snakeObj;
    },
    getClient: (id, network) => {
        switch (network) {
            case dto_1.Network.BITCOIN:
            case dto_1.Network.BITCOIN_TESTNET:
                return new service_1.Bitcoin(id);
            case dto_1.Network.LITECOIN:
            case dto_1.Network.LITECOIN_TESTNET:
                return new service_1.Litecoin(id);
            case dto_1.Network.DOGECOIN:
            case dto_1.Network.DOGECOIN_TESTNET:
                return new service_1.Dogecoin(id);
            case dto_1.Network.BITCOIN_CASH:
            case dto_1.Network.BITCOIN_CASH_TESTNET:
                return new service_1.BitcoinCash(id);
            case dto_1.Network.ETHEREUM:
            case dto_1.Network.ETHEREUM_SEPOLIA:
            case dto_1.Network.ETHEREUM_GOERLI:
                return new service_1.Ethereum(id);
            case dto_1.Network.ETHEREUM_CLASSIC:
                return new service_1.EthereumClassic(id);
            case dto_1.Network.ARBITRUM_NOVA:
            case dto_1.Network.ARBITRUM_NOVA_TESTNET:
                return new service_1.ArbitrumNova(id);
            case dto_1.Network.ARBITRUM_ONE:
                return new service_1.ArbitrumOne(id);
            case dto_1.Network.AURORA:
            case dto_1.Network.AURORA_TESTNET:
                return new service_1.Aurora(id);
            case dto_1.Network.AVALANCHE_C:
            case dto_1.Network.AVALANCHE_C_TESTNET:
            case dto_1.Network.AVALANCHE_P:
            case dto_1.Network.AVALANCHE_P_TESTNET:
            case dto_1.Network.AVALANCHE_X:
            case dto_1.Network.AVALANCHE_X_TESTNET:
                return new service_1.AvalancheC(id);
            case dto_1.Network.BINANCE_SMART_CHAIN:
            case dto_1.Network.BINANCE_SMART_CHAIN_TESTNET:
                return new service_1.BinanceSmartChain(id);
            case dto_1.Network.CELO:
            case dto_1.Network.CELO_ALFAJORES:
                return new service_1.Celo(id);
            case dto_1.Network.CRONOS:
            case dto_1.Network.CRONOS_TESTNET:
                return new service_1.Cronos(id);
            case dto_1.Network.FANTOM:
            case dto_1.Network.FANTOM_TESTNET:
                return new service_1.Fantom(id);
            case dto_1.Network.GNOSIS:
            case dto_1.Network.GNOSIS_TESTNET:
                return new service_1.Gnosis(id);
            case dto_1.Network.HARMONY_ONE_SHARD_0:
            case dto_1.Network.HARMONY_ONE_TESTNET_SHARD_0:
                return new service_1.HarmonyOne(id);
            case dto_1.Network.HAQQ:
            case dto_1.Network.HAQQ_TESTNET:
                return new service_1.Haqq(id);
            case dto_1.Network.FLARE:
            case dto_1.Network.FLARE_COSTON:
            case dto_1.Network.FLARE_COSTON_2:
            case dto_1.Network.FLARE_SONGBIRD:
                return new service_1.Flare(id);
            case dto_1.Network.KLAYTN:
            case dto_1.Network.KLAYTN_BAOBAB:
                return new service_1.Klaytn(id);
            case dto_1.Network.KUCOIN:
            case dto_1.Network.KUCOIN_TESTNET:
                return new service_1.Kucoin(id);
            case dto_1.Network.OASIS:
            case dto_1.Network.OASIS_TESTNET:
                return new service_1.Oasis(id);
            case dto_1.Network.OPTIMISM:
            case dto_1.Network.OPTIMISM_TESTNET:
                return new service_1.Optimism(id);
            case dto_1.Network.PALM:
            case dto_1.Network.PALM_TESTNET:
                return new service_1.Palm(id);
            case dto_1.Network.POLYGON:
            case dto_1.Network.POLYGON_MUMBAI:
                return new service_1.Polygon(id);
            case dto_1.Network.VECHAIN:
            case dto_1.Network.VECHAIN_TESTNET:
                return new service_1.Vechain(id);
            case dto_1.Network.XDC:
            case dto_1.Network.XDC_TESTNET:
                return new service_1.Xdc(id);
            case dto_1.Network.XRP:
            case dto_1.Network.XRP_TESTNET:
                return new service_1.Xrp(id);
            case dto_1.Network.SOLANA:
            case dto_1.Network.SOLANA_DEVNET:
                return new service_1.Solana(id);
            case dto_1.Network.TRON:
            case dto_1.Network.TRON_SHASTA:
                return new service_1.Tron(id);
            case dto_1.Network.TEZOS:
                return new service_1.Tezos(id);
            case dto_1.Network.HORIZEN_EON:
                return new service_1.HorizenEon(id);
            default:
                return new service_1.BaseTatumSdk(id);
        }
    },
    log: ({ id, message, data, mode }) => {
        const config = typedi_1.Container.of(id).get(di_tokens_1.CONFIG);
        if (config.verbose) {
            if (data) {
                if (mode === 'table') {
                    console.table(data);
                }
                else {
                    console.debug(new Date().toISOString(), message, data);
                }
            }
            else {
                console.debug(new Date().toISOString(), message);
            }
        }
    },
    prepareRpcCall: (method, params, id = 1) => {
        return {
            jsonrpc: '2.0',
            id,
            method,
            params,
        };
    },
    deepMerge(target, source) {
        const isObject = (obj) => typeof obj === 'object' && obj !== null;
        if (!isObject(target) || !isObject(source)) {
            return source;
        }
        const output = { ...target };
        Object.keys(source).forEach((key) => {
            const targetValue = output[key];
            const sourceValue = source[key];
            if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {
                output[key] = [...targetValue, ...sourceValue];
            }
            else if (isObject(targetValue) && isObject(sourceValue)) {
                output[key] = exports.Utils.deepMerge(targetValue, sourceValue);
            }
            else {
                output[key] = sourceValue;
            }
        });
        return output;
    },
    getV1RpcUrl: (config, path) => {
        const { apiKey, rpc, network } = config;
        if (apiKey) {
            const url = rpc?.nodes?.[0].url ||
                `https://api.tatum.io/v3/blockchain/node/${network}/${apiKey.v3 ? apiKey.v3 : apiKey.v4}`;
            return url.concat(path || '');
        }
        return rpc?.nodes?.[0].url || `https://api.tatum.io/v3/blockchain/node/${network}`.concat(path || '');
    },
};
//# sourceMappingURL=util.shared.js.map