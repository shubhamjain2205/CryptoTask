"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var SolanaRpc_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaRpc = void 0;
const typedi_1 = require("typedi");
const util_1 = require("../../util");
const generic_1 = require("./generic");
let SolanaRpc = SolanaRpc_1 = class SolanaRpc extends generic_1.AbstractBatchRpc {
    constructor(id) {
        super(id);
    }
    getAccountInfo(pubkey, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getAccountInfo', [pubkey, options]));
    }
    getBalance(address) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getBalance', [address]));
    }
    getBlockHeight(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getBlockHeight', [options]));
    }
    getBlock(block, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getBlock', [block, options]));
    }
    getBlockProduction(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getBlockProduction', [options]));
    }
    getBlockCommitment(block) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getBlockCommitment', [block]));
    }
    getBlocks(startSlot, endSlot, options) {
        let params = [startSlot];
        if (endSlot)
            params = [startSlot, endSlot];
        if (options && options.commitment)
            params.push(options);
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getBlocks', params));
    }
    getBlocksWithLimit(startSlot, limit, options) {
        let params = [startSlot];
        if (limit)
            params = [startSlot, limit];
        if (options && options.commitment)
            params.push(options);
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getBlocksWithLimit', params));
    }
    getBlockTime(block) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getBlockTime', [block]));
    }
    getClusterNodes() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getClusterNodes'));
    }
    getEpochInfo(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getEpochInfo', [options]));
    }
    getEpochSchedule() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getEpochSchedule'));
    }
    getFeeForMessage(message, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getFeeForMessage', [message, options]));
    }
    getFirstAvailableBlock() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getFirstAvailableBlock'));
    }
    getGenesisHash() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getGenesisHash'));
    }
    getHealth() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getHealth'));
    }
    getHighestSnapshotSlot() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getHighestSnapshotSlot'));
    }
    getIdentity() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getIdentity'));
    }
    getInflationGovernor(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getInflationGovernor', [options]));
    }
    getInflationRate() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getInflationRate'));
    }
    getInflationReward(addresses, options) {
        let params = [];
        if (addresses)
            params = [addresses];
        if (options)
            params = [addresses, options];
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getInflationReward', params));
    }
    getLargestAccounts(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getLargestAccounts', [options]));
    }
    getLatestBlockhash(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getLatestBlockhash', [options]));
    }
    getLeaderSchedule(slot, options) {
        let params = [];
        if (slot)
            params = [slot];
        if (options)
            params = [slot, options];
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getLeaderSchedule', params));
    }
    getMaxRetransmitSlot() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getMaxRetransmitSlot'));
    }
    getMaxShredInsertSlot() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getMaxShredInsertSlot'));
    }
    getMinimumBalanceForRentExemption(dataSize, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getMinimumBalanceForRentExemption', [dataSize, options]));
    }
    getMultipleAccounts(pubKeys, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getMultipleAccounts', [pubKeys, options]));
    }
    getProgramAccounts(programId, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getProgramAccounts', [programId, options]));
    }
    getRecentPerformanceSamples(limit) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getRecentPerformanceSamples', [limit]));
    }
    getRecentPrioritizationFees(addresses) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getRecentPrioritizationFees', [addresses]));
    }
    getSignaturesForAddress(address, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getSignaturesForAddress', [address, options]));
    }
    getSignatureStatuses(signatures, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getSignatureStatuses', [signatures, options]));
    }
    getSlot(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getSlot', [options]));
    }
    getSlotLeader(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getSlotLeader', [options]));
    }
    getSlotLeaders(startSlot, limit) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getSlotLeaders', [startSlot, limit]));
    }
    getStakeActivation(pubkey, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getStakeActivation', [pubkey, options]));
    }
    getStakeMinimumDelegation(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getStakeMinimumDelegation', [options]));
    }
    getSupply(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getSupply', [options]));
    }
    getTokenAccountBalance(pubkey, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getTokenAccountBalance', [pubkey, options]));
    }
    getTokenAccountsByDelegate(pubkey, config, options) {
        const params = [pubkey];
        if (config)
            params.push(config);
        if (options)
            params.push(options);
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getTokenAccountsByDelegate', params));
    }
    getTokenAccountsByOwner(pubkey, config, options) {
        const params = [pubkey];
        if (config)
            params.push(config);
        if (options)
            params.push(options);
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getTokenAccountsByOwner', params));
    }
    getTokenLargestAccounts(pubkey, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getTokenLargestAccounts', [pubkey, options]));
    }
    getTokenSupply(pubkey, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getTokenSupply', [pubkey, options]));
    }
    getTransaction(signature, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getTransaction', [signature, options]));
    }
    getTransactionCount(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getTransactionCount', [options]));
    }
    getVersion() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getVersion'));
    }
    getVoteAccounts(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('getVoteAccounts', [options]));
    }
    isBlockhashValid(blockhash, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('isBlockhashValid', [blockhash, options]));
    }
    minimumLedgerSlot() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('minimumLedgerSlot'));
    }
    requestAirdrop(pubkey, amount, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('requestAirdrop', [pubkey, amount, options]));
    }
    sendTransaction(transaction, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('sendTransaction', [transaction, options]));
    }
    simulateTransaction(transaction, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('simulateTransaction', [transaction, options]));
    }
};
SolanaRpc = SolanaRpc_1 = __decorate([
    (0, typedi_1.Service)({
        factory: (data) => {
            return new SolanaRpc_1(data.id);
        },
        transient: true,
    }),
    __metadata("design:paramtypes", [String])
], SolanaRpc);
exports.SolanaRpc = SolanaRpc;
//# sourceMappingURL=SolanaRpc.js.map