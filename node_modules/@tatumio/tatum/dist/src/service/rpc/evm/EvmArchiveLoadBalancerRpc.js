"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EvmArchiveLoadBalancerRpc_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmArchiveLoadBalancerRpc = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const typedi_1 = require("typedi");
const util_1 = require("../../../util");
const LoadBalancer_1 = require("../generic/LoadBalancer");
const AbstractEvmRpc_1 = require("./AbstractEvmRpc");
const ARCHIVE_METHODS = [
    // Archival information
    'debug_getBadBlocks',
    'debug_storageRangeAt',
    'debug_traceCall',
    'debug_traceTransaction',
    'debug_traceBlock',
    'debug_traceBlockByHash',
    'debug_traceBlockByNumber',
    'trace_block',
    'trace_call',
    'trace_callMany',
    'trace_rawTransaction',
    'trace_replayBlockTransactions',
    // Network state
    'eth_getBlockByHash',
    'eth_getTransactionByHash',
    'eth_getTransactionReceipt',
    'eth_getUncleCountByBlockHash',
    'eth_getUncleCountByBlockNumber',
    'eth_getBlockByNumber',
    'eth_getBlockTransactionCountByHash',
    'eth_getBlockTransactionCountByNumber',
    'eth_getBlockReceipts',
    'eth_getTransactionByBlockHashAndIndex',
    'eth_getTransactionByBlockNumberAndIndex',
    'eth_getTransactionCount',
    'eth_getProof',
];
const POSSIBLE_ARCHIVE_METHODS = [
    // Network state
    { method: 'eth_getStorageAt', index: 2 },
    { method: 'eth_call', index: 1 },
    { method: 'eth_getBalance', index: 1 },
    { method: 'eth_getCode', index: 1 }, // second param block
];
let EvmArchiveLoadBalancerRpc = EvmArchiveLoadBalancerRpc_1 = class EvmArchiveLoadBalancerRpc extends AbstractEvmRpc_1.AbstractEvmRpc {
    constructor(id) {
        super();
        this.loadBalancerRpc = typedi_1.Container.of(id).get(LoadBalancer_1.LoadBalancer);
    }
    isParamForArchiveNode(param) {
        return !!param && param !== 'latest';
    }
    isArchiveMethod(rpc) {
        const isArchiveMethod = ARCHIVE_METHODS.includes(rpc.method);
        if (isArchiveMethod) {
            return true;
        }
        const possibleArchiveMethod = POSSIBLE_ARCHIVE_METHODS.find((possibleArchiveMethod) => possibleArchiveMethod.method === rpc.method);
        if (possibleArchiveMethod) {
            const param = rpc?.params?.[possibleArchiveMethod.index];
            return this.isParamForArchiveNode(param);
        }
        if (rpc.method === 'eth_getLogs') {
            const param = rpc?.params?.[1] || {};
            return this.isParamForArchiveNode(param.fromBlock) || this.isParamForArchiveNode(param.toBlock);
        }
        return false;
    }
    async rpcCall(method, params) {
        const preparedCall = util_1.Utils.prepareRpcCall(method, params);
        const isArchive = this.isArchiveMethod(preparedCall);
        return (await this.loadBalancerRpc.rawRpcCall(preparedCall, isArchive));
    }
    async rawRpcCall(body) {
        const isArchive = this.isArchiveMethod(body);
        return this.loadBalancerRpc.rawRpcCall(body, isArchive);
    }
    rawBatchRpcCall(body) {
        return this.loadBalancerRpc.rawBatchRpcCall(body);
    }
    destroy() {
        this.loadBalancerRpc.destroy();
    }
    getRpcNodeUrl() {
        return this.loadBalancerRpc.getActiveArchiveUrlWithFallback().url;
    }
};
EvmArchiveLoadBalancerRpc = EvmArchiveLoadBalancerRpc_1 = __decorate([
    (0, typedi_1.Service)({
        factory: (data) => {
            return new EvmArchiveLoadBalancerRpc_1(data.id);
        },
        transient: true,
    }),
    __metadata("design:paramtypes", [String])
], EvmArchiveLoadBalancerRpc);
exports.EvmArchiveLoadBalancerRpc = EvmArchiveLoadBalancerRpc;
//# sourceMappingURL=EvmArchiveLoadBalancerRpc.js.map