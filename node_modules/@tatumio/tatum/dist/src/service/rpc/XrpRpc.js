"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var XrpRpc_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrpRpc = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const typedi_1 = require("typedi");
const util_1 = require("../../util");
const generic_1 = require("./generic");
const generateXrpParams = (required, optional) => {
    const xrpParams = {};
    const props = (required ? Object.entries(required) : []).concat(optional ? Object.entries(optional) : []);
    for (const [name, value] of props) {
        xrpParams[util_1.Utils.camelToSnakeCase(name)] = value;
    }
    return [xrpParams];
};
let XrpRpc = XrpRpc_1 = class XrpRpc extends generic_1.AbstractBatchRpc {
    constructor(id) {
        super(id);
    }
    accountChannels(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('account_channels', generateXrpParams({
            account,
        }, options)));
    }
    accountCurrencies(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('account_currencies', generateXrpParams({ account }, options)));
    }
    accountInfo(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('account_info', generateXrpParams({ account }, options)));
    }
    accountLines(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('account_lines', generateXrpParams({ account }, options)));
    }
    accountNfts(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('account_nfts', generateXrpParams({ account }, options)));
    }
    accountObjects(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('account_objects', generateXrpParams({
            account,
        }, options)));
    }
    accountOffers(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('account_offers', generateXrpParams({ account }, options)));
    }
    accountTx(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('account_tx', generateXrpParams({
            account,
        }, options)));
    }
    gatewayBalances(account, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('gateway_balances', generateXrpParams({ account }, options)));
    }
    norippleCheck(account, role, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('noripple_check', generateXrpParams({ account, role }, options)));
    }
    ledger(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('ledger', generateXrpParams({}, options)));
    }
    ledgerClosed() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('ledger_closed'));
    }
    ledgerCurrent() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('ledger_current'));
    }
    ledgerData(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('ledger_data', generateXrpParams({}, options)));
    }
    ledgerEntry(options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('ledger_entry', generateXrpParams({}, options)));
    }
    submit(tx, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('submit', generateXrpParams(typeof tx === 'string' ? { txBlob: tx } : { txJson: tx }, options)));
    }
    submitMultisigned(txJson, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('submit_multisigned', generateXrpParams({ txJson }, options)));
    }
    transactionEntry(txHash, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('transaction_entry', generateXrpParams({ txHash }, options)));
    }
    tx(transaction, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('tx', generateXrpParams({ transaction }, options)));
    }
    txHistory(start) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('txHistory', generateXrpParams({ start })));
    }
    sign(txJson, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('sign', generateXrpParams({
            txJson,
        }, options)));
    }
    signFor(account, txJson, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('sign_for', generateXrpParams({ account, txJson }, options)));
    }
    bookOffers(takerGets, takerPays, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('book_offers', generateXrpParams({ takerGets, takerPays }, options)));
    }
    depositAuthorized(sourceAccount, destinationAccount, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('deposit_authorized', generateXrpParams({
            sourceAccount,
            destinationAccount,
        }, options)));
    }
    nftBuyOffers(nftId, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('nft_buy_offers', generateXrpParams({ nftId }, options)));
    }
    nftSellOffers(nftId, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('nft_sell_offers', generateXrpParams({ nftId }, options)));
    }
    ripplePathFind(sourceAccount, destinationAccount, destinationAmount, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('ripple_path_find', generateXrpParams({
            sourceAccount,
            destinationAccount,
            destinationAmount,
        }, options)));
    }
    channelAuthorize(amount, channelId, options) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('channel_authorize', generateXrpParams({
            amount,
            channelId,
        }, options)));
    }
    channelVerify(amount, channelId, publicKey, signature) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('channel_verify', generateXrpParams({ amount, channelId, publicKey, signature })));
    }
    fee() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('fee'));
    }
    serverInfo() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('server_info', generateXrpParams()));
    }
    serverState() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('server_state'));
    }
    manifest(publicKey) {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('manifest', generateXrpParams({ publicKey })));
    }
    ping() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('ping'));
    }
    random() {
        return this.connector.rpcCall(this.getRpcNodeUrl(), util_1.Utils.prepareRpcCall('random'));
    }
};
XrpRpc = XrpRpc_1 = __decorate([
    (0, typedi_1.Service)({
        factory: (data) => {
            return new XrpRpc_1(data.id);
        },
        transient: true,
    }),
    __metadata("design:paramtypes", [String])
], XrpRpc);
exports.XrpRpc = XrpRpc;
//# sourceMappingURL=XrpRpc.js.map