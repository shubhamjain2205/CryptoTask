"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MetaMask_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaMask = void 0;
const bignumber_js_1 = require("bignumber.js");
const typedi_1 = require("typedi");
const tatum_connector_1 = require("../../connector/tatum.connector");
const util_1 = require("../../util");
let MetaMask = MetaMask_1 = class MetaMask {
    constructor(id) {
        this.id = id;
        this.config = typedi_1.Container.of(this.id).get(util_1.CONFIG);
        this.rpc = util_1.Utils.getRpc(this.id, this.config);
        this.connector = typedi_1.Container.of(this.id).get(tatum_connector_1.TatumConnector);
    }
    /**
     * Connect to MetaMask wallet. this method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the address of the connected account. If not, it throws an error.
     * @returns address of the connected account.
     */
    async connect() {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        if (typeof window.ethereum === 'undefined') {
            throw new Error('MetaMask is not installed or its impossible to connect to it.');
        }
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
            return accounts[0];
        }
        catch (error) {
            console.error('User denied account access:', error);
            throw new Error(`User denied account access. Error is ${error}`);
        }
    }
    /**
     * Sign native transaction with MetaMask wallet. This method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the signed transaction hash. If not, it throws an error.
     * @param recipient recipient of the transaction
     * @param amount amount to be sent, in native currency (ETH, BSC)
     */
    async transferNative(recipient, amount) {
        const payload = {
            to: recipient,
            from: await this.connect(),
            value: `0x${new bignumber_js_1.BigNumber(amount)
                .multipliedBy(10 ** util_1.Constant.DECIMALS[this.config.network])
                .toString(16)}`,
        };
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/return-await
            return await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [payload],
            });
        }
        catch (e) {
            console.error('User denied transaction signature:', e);
            throw new Error(`User denied transaction signature. Error is ${e}`);
        }
    }
    /**
     * Sign ERC-20 fungible token `transfer` transaction (https://ethereum.org/en/developers/docs/standards/tokens/erc-20/#methods) with MetaMask wallet. This method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the signed transaction hash. If not, it throws an error.
     * @param recipient recipient of the transaction
     * @param amount amount to be sent, in token currency
     * @param tokenAddress address of the token contract
     */
    async transferErc20(recipient, amount, tokenAddress) {
        const { result: decimals } = await this.rpc.getTokenDecimals(tokenAddress);
        const payload = {
            to: tokenAddress,
            from: await this.connect(),
            data: `0xa9059cbb${util_1.Utils.padWithZero(recipient)}${new bignumber_js_1.BigNumber(amount)
                .multipliedBy(10 ** decimals.toNumber())
                .toString(16)
                .padStart(64, '0')}`,
        };
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/return-await
            return await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [payload],
            });
        }
        catch (e) {
            console.error('User denied transaction signature:', e);
            throw new Error(`User denied transaction signature. Error is ${e}`);
        }
    }
    /**
     * Deploy new ERC-721 NFT Collection contract with MetaMask wallet. This method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the signed transaction hash. If not, it throws an error.
     */
    async createNftCollection(body) {
        const { name, symbol, baseURI, author, minter } = body;
        const from = await this.connect();
        const { data } = await this.connector.post({
            path: `contract/deploy/prepare`,
            body: {
                contractType: 'nft',
                params: [name, symbol, baseURI || '', author || from, minter || from],
            },
        });
        const payload = {
            from: from,
            data,
        };
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/return-await
            return await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [payload],
            });
        }
        catch (e) {
            console.error('User denied transaction signature:', e);
            throw new Error(`User denied transaction signature. Error is ${e}`);
        }
    }
    /**
     * Deploy new ERC-20 Token (USDT or USDC like) contract with MetaMask wallet. This method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the signed transaction hash. If not, it throws an error.
     */
    async createFungibleToken(body) {
        const from = await this.connect();
        const decimals = body.decimals || 18;
        const { data } = await this.connector.post({
            path: `contract/deploy/prepare`,
            body: {
                contractType: 'fungible',
                params: [
                    body.name,
                    body.symbol,
                    decimals,
                    `0x${new bignumber_js_1.BigNumber(body.initialSupply).multipliedBy(10 ** decimals).toString(16)}`,
                    body.initialHolder || from,
                    body.admin || from,
                    body.minter || from,
                    body.pauser || from,
                ],
            },
        });
        const payload = {
            from: from,
            data,
        };
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/return-await
            return await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [payload],
            });
        }
        catch (e) {
            console.error('User denied transaction signature:', e);
            throw new Error(`User denied transaction signature. Error is ${e}`);
        }
    }
    /**
     * Deploy new ERC-1155 NFT Collection contract with MetaMask wallet. This method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the signed transaction hash. If not, it throws an error.
     */
    async createErc1155NftCollection(body) {
        const { author, minter, baseURI } = body || {};
        const from = await this.connect();
        const { data } = await this.connector.post({
            path: `contract/deploy/prepare`,
            body: {
                contractType: 'multitoken',
                params: [author || from, minter || from, baseURI || ''],
            },
        });
        const payload = {
            from: from,
            data,
        };
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/return-await
            return await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [payload],
            });
        }
        catch (e) {
            console.error('User denied transaction signature:', e);
            throw new Error(`User denied transaction signature. Error is ${e}`);
        }
    }
    /**
     * Sign ERC-721 non-fungible token `safeTransferFrom` transaction (https://ethereum.org/en/developers/docs/standards/tokens/erc-721/#methods) with MetaMask wallet. This method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the signed transaction hash. If not, it throws an error.
     * @param recipient recipient of the transaction
     * @param tokenId ID of the NFT token
     * @param tokenAddress address of the token contract
     */
    async transferNft(recipient, tokenId, tokenAddress) {
        const from = await this.connect();
        const payload = {
            to: tokenAddress,
            from: from,
            data: `0x42842e0e${util_1.Utils.padWithZero(from)}${util_1.Utils.padWithZero(recipient)}${new bignumber_js_1.BigNumber(tokenId)
                .toString(16)
                .padStart(64, '0')}`,
        };
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/return-await
            return await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [payload],
            });
        }
        catch (e) {
            console.error('User denied transaction signature:', e);
            throw new Error(`User denied transaction signature. Error is ${e}`);
        }
    }
    /**
     * Sign ERC-20 fungible token `approve` transaction (https://ethereum.org/en/developers/docs/standards/tokens/erc-20/#methods) with MetaMask wallet. This method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the signed transaction hash. If not, it throws an error.
     * @param spender address to be approved to spend the tokens
     * @param amount amount to be sent, in token currency
     * @param tokenAddress address of the token contract
     */
    async approveErc20(spender, amount, tokenAddress) {
        const { result: decimals } = await this.rpc.getTokenDecimals(tokenAddress);
        const payload = {
            to: tokenAddress,
            from: await this.connect(),
            data: `0x095ea7b3${util_1.Utils.padWithZero(spender)}${new bignumber_js_1.BigNumber(amount)
                .multipliedBy(10 ** decimals.toNumber())
                .toString(16)
                .padStart(64, '0')}`,
        };
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/return-await
            return await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [payload],
            });
        }
        catch (e) {
            console.error('User denied transaction signature:', e);
            throw new Error(`User denied transaction signature. Error is ${e}`);
        }
    }
    /**
     * Sign custom transaction with MetaMask wallet. This method checks if MetaMask is installed and if it is connected to the browser.
     * If so, it returns the signed transaction hash. If not, it throws an error.
     * @param payload Transaction payload. From field is ignored and will be overwritten by the connected account.
     */
    async customPayload(payload) {
        payload.from = await this.connect();
        try {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/return-await
            return await window.ethereum.request({
                method: 'eth_sendTransaction',
                params: [payload],
            });
        }
        catch (e) {
            console.error('User denied transaction signature:', e);
            throw new Error(`User denied transaction signature. Error is ${e}`);
        }
    }
};
MetaMask = MetaMask_1 = __decorate([
    (0, typedi_1.Service)({
        factory: (data) => {
            return new MetaMask_1(data.id);
        },
        transient: true,
    }),
    __metadata("design:paramtypes", [String])
], MetaMask);
exports.MetaMask = MetaMask;
//# sourceMappingURL=metaMask.js.map