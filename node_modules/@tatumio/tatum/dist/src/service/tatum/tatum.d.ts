import { EvmBasedRpcSuite, SolanaRpcSuite, TronRpcSuite, UtxoBasedRpcSuite, XrpRpcSuite } from '../../dto/rpc';
import { Address, AddressTezos, AddressTron } from '../address';
import { FeeEvm, FeeUtxo } from '../fee';
import { Nft, NftTezos } from '../nft';
import { Notification } from '../notification';
import { Rates } from '../rate';
import { Token } from '../token';
import { WalletProvider } from '../walletProvider';
import { TatumConfig } from './tatum.dto';
import { TatumSdkContainer, TatumSdkExtension } from "../extensions";
export interface ITatumSdkChain {
    extension<T extends TatumSdkExtension>(type: new (tatumSdkContainer: TatumSdkContainer, ...args: unknown[]) => T): T;
}
export declare abstract class TatumSdkChain implements ITatumSdkChain {
    readonly id: string;
    protected constructor(id: string);
    extension<T extends TatumSdkExtension>(type: new (tatumSdkContainer: TatumSdkContainer, ...args: unknown[]) => T): T;
    destroy(): void;
}
export declare class BaseTatumSdk extends TatumSdkChain {
    notification: Notification;
    nft: Nft;
    token: Token;
    address: Address;
    walletProvider: WalletProvider;
    rates: Rates;
    constructor(id: string);
}
export declare abstract class BaseUtxoClass extends BaseTatumSdk {
    rpc: UtxoBasedRpcSuite;
    fee: FeeUtxo;
    constructor(id: string);
}
export declare abstract class BaseEvmClass extends BaseTatumSdk {
    rpc: EvmBasedRpcSuite;
    constructor(id: string);
}
export declare class Ethereum extends BaseEvmClass {
    fee: FeeEvm;
    constructor(id: string);
}
export declare class ArbitrumNova extends BaseEvmClass {
}
export declare class ArbitrumOne extends BaseEvmClass {
}
export declare class Aurora extends BaseEvmClass {
}
export declare class AvalancheC extends BaseEvmClass {
}
export declare class BinanceSmartChain extends BaseEvmClass {
}
export declare class Celo extends BaseEvmClass {
}
export declare class Cronos extends BaseEvmClass {
}
export declare class EthereumClassic extends BaseEvmClass {
}
export declare class Fantom extends BaseEvmClass {
}
export declare class Gnosis extends BaseEvmClass {
}
export declare class Haqq extends BaseEvmClass {
}
export declare class Flare extends BaseEvmClass {
}
export declare class HarmonyOne extends BaseEvmClass {
}
export declare class Klaytn extends BaseEvmClass {
}
export declare class Kucoin extends BaseEvmClass {
}
export declare class Oasis extends BaseEvmClass {
}
export declare class Optimism extends BaseEvmClass {
}
export declare class Palm extends BaseEvmClass {
}
export declare class Polygon extends BaseEvmClass {
}
export declare class Vechain extends BaseEvmClass {
}
export declare class Xdc extends BaseEvmClass {
}
export declare class HorizenEon extends BaseEvmClass {
}
export declare class Bitcoin extends BaseUtxoClass {
}
export declare class Litecoin extends BaseUtxoClass {
}
export declare class Dogecoin extends BaseUtxoClass {
}
export declare class BitcoinCash extends BaseUtxoClass {
}
export declare class Xrp extends BaseTatumSdk {
    rpc: XrpRpcSuite;
    constructor(id: string);
}
export declare class Solana extends BaseTatumSdk {
    rpc: SolanaRpcSuite;
    constructor(id: string);
}
export declare class Tron extends TatumSdkChain {
    notification: Notification;
    nft: Nft;
    token: Token;
    address: AddressTron;
    walletProvider: WalletProvider;
    rates: Rates;
    rpc: TronRpcSuite;
    constructor(id: string);
}
export declare class Tezos extends TatumSdkChain {
    notification: Notification;
    address: AddressTezos;
    nft: NftTezos;
    constructor(id: string);
}
export declare class TatumSDK {
    /**
     * Initialize Tatum SDK. This method must be called before any other method.
     * Default configuration is used if no configuration is provided.
     * @param config
     */
    static init<T extends ITatumSdkChain>(config: TatumConfig): Promise<T>;
    private static configureExtensions;
    private static generateRandomString;
}
