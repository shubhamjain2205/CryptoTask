"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmE2eUtils = void 0;
const service_1 = require("../../../service");
const rpc_e2e_utils_1 = require("../rpc.e2e.utils");
exports.EvmE2eUtils = {
    initTatum: async (network, apiKey) => service_1.TatumSDK.init(rpc_e2e_utils_1.RpcE2eUtils.initConfig(network, apiKey)),
    e2e: (evmE2eI) => {
        const { network, expected, data, skipEstimateGas, apiKey } = evmE2eI;
        it('eth_blockNumber', async () => {
            const tatum = await exports.EvmE2eUtils.initTatum(network, apiKey);
            const { result } = await tatum.rpc.blockNumber();
            tatum.destroy();
            expect(result?.toNumber()).toBeGreaterThan(0);
        });
        it('eth_chainId', async () => {
            const tatum = await exports.EvmE2eUtils.initTatum(network, apiKey);
            const { result } = await tatum.rpc.chainId();
            tatum.rpc.destroy();
            expect(result?.toNumber()).toBe(expected.chainId);
        });
        if (!skipEstimateGas) {
            it('eth_estimateGas', async () => {
                const tatum = await exports.EvmE2eUtils.initTatum(network, apiKey);
                const estimateGas = data?.estimateGas ?? {
                    from: '0xb4c9E4617a16Be36B92689b9e07e9F64757c1792',
                    to: '0x4675C7e5BaAFBFFbca748158bEcBA61ef3b0a263',
                    value: '0x0',
                };
                const { result } = await tatum.rpc.estimateGas(estimateGas);
                tatum.destroy();
                expect(result?.toNumber()).toBeGreaterThanOrEqual(0);
            });
        }
        it('eth_gasPrice', async () => {
            const tatum = await exports.EvmE2eUtils.initTatum(network, apiKey);
            const { result } = await tatum.rpc.gasPrice();
            tatum.destroy();
            expect(result?.toNumber()).toBeGreaterThan(0);
        });
        it('web3_clientVersion', async () => {
            const tatum = await exports.EvmE2eUtils.initTatum(network, apiKey);
            const { result } = await tatum.rpc.clientVersion();
            tatum.destroy();
            expect(result).toBeTruthy();
        });
        it('eth_getBlockByNumber', async () => {
            const tatum = await exports.EvmE2eUtils.initTatum(network, apiKey);
            const { result } = await tatum.rpc.blockNumber();
            const { result: block } = await tatum.rpc.getBlockByNumber(result.toNumber() - 1000);
            tatum.destroy();
            expect(block.timestamp).toBeDefined();
            expect(block.size).toBeDefined();
        });
    },
};
//# sourceMappingURL=evm.e2e.utils.js.map