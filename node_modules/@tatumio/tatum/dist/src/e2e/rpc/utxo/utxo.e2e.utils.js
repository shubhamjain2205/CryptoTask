"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtxoE2eUtils = exports.UtxoNetworkType = void 0;
const service_1 = require("../../../service");
const rpc_e2e_utils_1 = require("../rpc.e2e.utils");
var UtxoNetworkType;
(function (UtxoNetworkType) {
    UtxoNetworkType["MAIN"] = "main";
    UtxoNetworkType["TEST"] = "test";
})(UtxoNetworkType = exports.UtxoNetworkType || (exports.UtxoNetworkType = {}));
exports.UtxoE2eUtils = {
    initTatum: async (network) => service_1.TatumSDK.init(rpc_e2e_utils_1.RpcE2eUtils.initConfig(network)),
    e2e: ({ type, network }) => {
        it('chain info', async () => {
            const tatum = await exports.UtxoE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.getBlockChainInfo();
            expect(result.chain).toBe(type);
            tatum.destroy();
        });
        it('chain info raw call', async () => {
            const tatum = await exports.UtxoE2eUtils.initTatum(network);
            const info = await tatum.rpc.rawRpcCall({
                method: 'getblockchaininfo',
                id: '1',
                jsonrpc: '2.0',
            });
            expect(info.result.chain).toBe(type);
            tatum.destroy();
        });
        it('best block hash', async () => {
            const tatum = await exports.UtxoE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.getBestBlockHash();
            expect(result).toBeTruthy();
            tatum.destroy();
        });
        it('block count', async () => {
            const tatum = await exports.UtxoE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.getBlockCount();
            expect(result).toBeGreaterThan(0);
            tatum.destroy();
        });
        it('difficulty', async () => {
            const tatum = await exports.UtxoE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.getDifficulty();
            expect(result).toBeGreaterThan(0);
            tatum.destroy();
        });
        it('mempool info', async () => {
            const tatum = await exports.UtxoE2eUtils.initTatum(network);
            const { result } = await tatum.rpc.getMempoolInfo();
            expect(result).toBeDefined();
            tatum.destroy();
        });
        it('estimatesmartfee', async () => {
            const tatum = await exports.UtxoE2eUtils.initTatum(network);
            const result = await tatum.rpc.estimateSmartFee(6);
            expect(result.result).not.toBeNull();
            tatum.destroy();
        });
    },
};
//# sourceMappingURL=utxo.e2e.utils.js.map