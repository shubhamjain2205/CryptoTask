"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dto_1 = require("../dto");
const service_1 = require("../service");
describe('Tatum Init', () => {
    describe('IP auth', () => {
        it('Testnet', async () => {
            const tatum = await service_1.TatumSDK.init({
                network: dto_1.Network.BITCOIN_TESTNET,
            });
            const { result } = await tatum.rpc.getBlockChainInfo();
            expect(result.chain).toBe('test');
            tatum.destroy();
        });
        it('Mainnet', async () => {
            const tatum = await service_1.TatumSDK.init({
                network: dto_1.Network.BITCOIN,
            });
            const { result } = await tatum.rpc.getBlockChainInfo();
            expect(result.chain).toBe('main');
            tatum.destroy();
        });
    });
    describe('Multiple Instances', () => {
        it('IP auth', async () => {
            const mainnet = await service_1.TatumSDK.init({
                network: dto_1.Network.BITCOIN,
            });
            const testnet = await service_1.TatumSDK.init({
                network: dto_1.Network.BITCOIN_TESTNET,
            });
            const { result: resultMainnet } = await mainnet.rpc.getBlockChainInfo();
            expect(resultMainnet.chain).toBe('main');
            const { result: resultTestnet } = await testnet.rpc.getBlockChainInfo();
            expect(resultTestnet.chain).toBe('test');
            testnet.destroy();
            mainnet.destroy();
        });
    });
});
//# sourceMappingURL=tatum.spec.js.map